generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id          String    @id @default(uuid())
  email       String    @unique
  name        String
  password    String
  points      Int       @default(0)
  tasks       Task[]
  streaks     Streak[]
  achievements Achievement[]
  claimedRewards ClaimedReward[] // Relation to claimed rewards
  friendInvitesSent   FriendInvite[] @relation("sentInvites")
  friendInvitesReceived FriendInvite[] @relation("receivedInvites")
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Task {
  id          String   @id @default(uuid())
  title       String
  description String?
  completed   Boolean  @default(false)
  user        User     @relation(fields: [userId], references: [id])
  userId      String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  dueDate     DateTime?
}

model Streak {
  id              String    @id @default(uuid())
  startDate       DateTime
  endDate         DateTime?
  user            User      @relation(fields: [userId], references: [id])
  userId          String
  currentStreak   Int       @default(0)
  longestStreak   Int       @default(0)
  lastCompletedDate DateTime?
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
}

model Achievement {
  id          String    @id @default(uuid())
  name        String
  description String?
  user        User      @relation(fields: [userId], references: [id])
  userId      String
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

model Reward {
  id          String    @id @default(uuid())
  name        String
  points      Int
  claimed     Boolean   @default(false) // Flag to check if itâ€™s claimed (but not tied to a specific user)
  claimedRewards ClaimedReward[]  // Relation to claimed rewards
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

model ClaimedReward {
  id          String    @id @default(uuid())
  user        User      @relation(fields: [userId], references: [id])
  userId      String
  reward      Reward    @relation(fields: [rewardId], references: [id])
  rewardId    String
  createdAt   DateTime  @default(now())
}

model FriendInvite {
  id          String    @id @default(uuid())
  sender      User      @relation("sentInvites", fields: [senderId], references: [id])
  senderId    String
  receiver    User      @relation("receivedInvites", fields: [receiverId], references: [id])
  receiverId  String
  accepted    Boolean   @default(false)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}
